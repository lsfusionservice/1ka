MODULE ProjectEquipmentLineCustom;

REQUIRE ProjectCustom, ItemCustom, ProductLot, ProjectTechnicalSolutionCustom;
NAMESPACE ProjectManagement;

// barcode
processBarCode ABSTRACT LIST (Project, ProjectEquipmentLine, STRING);
scanBarCode (Project p, ProjectEquipmentLine l) {
    INPUT id = STRING DO {
            consumedBarCode() <- NULL;
            processBarCode(p, l, id);
            IF NOT consumedBarCode() THEN
                MESSAGE 'Barcode not found';
    }
}

equipmentInitialDemand 'Initial demand' (Project p) = GROUP SUM initialDemand(ProjectEquipmentLine l) IF project(l) = p MATERIALIZED;

done 'Quantity (done)' = DATA NUMERIC[16,3] (ProjectEquipmentLine, Lot);
equipmentDone 'Done' = DATA BOOLEAN (Project);

lotsDone 'Lots' (ProjectEquipmentLine l) = 
    GROUP CONCAT
        (CONCAT '', id(Lot lot) IF done(l, lot), '(' + (STRING(DOUBLE(done(l, lot))) IF (done(l, lot) != 1)) + ')'), 
        ',' ORDER lot CHARWIDTH 15; 

doneLot 'Lot quantity (done)' (ProjectEquipmentLine rl) = GROUP SUM done(rl, Lot l);
doneLotLeft (ProjectEquipmentLine rl) = done(rl) - OVERRIDE doneLot(rl), 0;

doneLot 'Lot initial demand' (Project p) = GROUP SUM done(ProjectEquipmentLine l, Lot lot) IF project(l) = p;

technicalSolution 'ТТР' = DATA TechnicalSolution (ProjectEquipmentLine, Lot);
nameTechnicalSolution 'ТТР' (ProjectEquipmentLine l, Lot lot) = name(technicalSolution(l, lot));

in (Project p, TechnicalSolution s) = GROUP MIN TRUE IF ProjectTechnicalSolutionLine sl AND project(sl) == p AND s == technicalSolution(sl);

CONSTRAINT SETCHANGED(technicalSolution(ProjectEquipmentLine l, Lot lot)) AND NOT in(project(l), technicalSolution(l, lot))
    CHECKED BY technicalSolution[ProjectEquipmentLine, Lot]
    MESSAGE 'ТТР не соответствует проекту';

WHEN LOCAL CHANGED(doneLot(ProjectEquipmentLine el)) AND NOT equipmentDone(project(el)) DO {
    done(el) <- doneLot(el);
}

CONSTRAINT done(ProjectEquipmentLine rl, Lot l) AND equipment(rl) != product(l)
                MESSAGE 'Document line product is not equal to lot product';
CONSTRAINT SET(((OVERRIDE done(ProjectEquipmentLine el), 0.0) - doneLot(el) < 0) AND equipmentDone(project(el))) AND useLot(equipment(el))
                MESSAGE 'Mismatch between quantity and quantity in lots (done)';

EXTEND FORM project 
    PROPERTIES barcodeL = barCode() DRAW el TOOLBAR ON CHANGE scanBarCode(p, el)

    OBJECTS lotL = Lot
    PROPERTIES (lotL) id READONLY
    PROPERTIES (el, lotL) done READONLYIF NOT useLot(product(lotL)), nameTechnicalSolution
    PROPERTIES (lotL) EDIT
    FILTERS done(el, lotL)
;

DESIGN project{
    details {
        equipments {
            caption = 'Оборудование';
//            horizontal = TRUE;
            MOVE BOX(el);
            NEW lines {
                fill = 1;
                MOVE BOX(lotL) {caption = 'Lots';};
                NEW horizontalLines{
                    fill = 1;
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE BOX(esl) {caption = 'Работы';};
                    MOVE BOX(esml) {caption = 'Материалы';};
                }
            }
        }            
    }
}

lastProjectEquipmentLine (Project i, Item p) = GROUP LAST ProjectEquipmentLine l ORDER l BY project(l), equipment(l);

beforeProcessProjectEquipmentLineLotBarCode ABSTRACT (Project, STRING);
afterProcessProjectEquipmentLineLotBarCode ABSTRACT (Project, STRING);

processBarCode(Project p, ProjectEquipmentLine rl, STRING s) + {
    LOCAL lotId = STRING();
    lotId() <- OVERRIDE barCodeToLotId(s), (s AS STRING);

    IF lot(lotId()) THEN {
        beforeProcessProjectEquipmentLineLotBarCode(p, lotId());

        LOCAL lot = Lot();
        lot() <- lot(lotId());

        IF NOT lot() THEN
            RETURN;

        IF NOT product(lot()) THEN {
            product(lot()) <- equipment(rl);
        }

        LOCAL line = ProjectEquipmentLine();

        IF product(lot()) AND NOT product(lot()) = equipment(rl) THEN {
            IF NOT lastProjectEquipmentLine(project(rl), product(lot())) THEN {
                NEW l = ProjectEquipmentLine {
                    project(l) <- p;
                    equipment(l) <- product(lot());
                    line() <- l;
                }
            } ELSE
                line() <- lastProjectEquipmentLine(project(rl), product(lot()));
            SEEK project.el = line();
        } ELSE
            line() <- rl;

        done(line(), lot()) <- done(line(), lot()) (+) 1;
        IF doneLot(line()) > OVERRIDE done(line()), 0 THEN
            done(line()) <- doneLot(line());

        afterProcessProjectEquipmentLineLotBarCode(p, lotId());

        consumedBarCode() <- TRUE;
    }
}

beforeProcessProjectEquipmentLineLotBarCode(Project p, STRING s) + {
    IF NOT lot(s) THEN {
        NEW l = Lot {
            id(l) <- STRING[100](s);
        }
    }
}

afterProcessProjectEquipmentLineLotBarCode(Project p, STRING s) + {
    SEEK project.lotL = lot(s);
    ACTIVATE TAB project.BOX(lotL);
    ACTIVATE PROPERTY project.done(el, lotL);
}

@defineProjectHistoryLine(project, ProjectEquipmentLine, equipment, 'Изменено оборудование', nameEquipment);
@defineProjectHistoryLineProperty(project, ProjectEquipmentLine, initialDemand, 'Оборудование - изменено планируемое кол-во', nameEquipment);
@defineProjectHistoryLineProperty(project, ProjectEquipmentLine, done, 'Оборудование - изменено кол-во (выполненное)', nameEquipment);